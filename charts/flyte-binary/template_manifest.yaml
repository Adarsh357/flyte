---
# Source: flyte-binary/templates/namespace.yaml
kind: Namespace
apiVersion: v1
metadata:
  name: flyte
  labels: 
    helm.sh/chart: flyte-binary-0.1.0
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flytesinglebin
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
---
# Source: flyte-binary/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: flyte
  annotations:
    eks.amazonaws.com/role-arn: arn:aws:iam::590375264460:role/development-service-flyte-adminflyterole
---
# Source: flyte-binary/templates/admin_secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: flyte-db-pass
type: Opaque
stringData:
  pass.txt: "BzMA1Qvm3gcwiwZXCH5O"
---
# Source: flyte-binary/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: flyte-backend-config
  labels: 
    helm.sh/chart: flyte-binary-0.1.0
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flytesinglebin
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  flyte.yaml: | 
    propeller:
      rawoutput-prefix: "s3://development-service-flyte/userdata/"
      create-flyteworkflow-crd: true
    webhook:
      certDir: /var/run/flyte/certs
      localCert: true
    tasks:
      task-plugins:
        enabled-plugins:
          - container
          - sidecar
          - K8S-ARRAY
        default-for-task-types:
          - container: container
          - container_array: K8S-ARRAY
    database:
      postgres:
        port: 5432
        username: postgres
        host: opta-service-flyte-postgres.cluster-cguibupmpitq.us-east-2.rds.amazonaws.com
        dbname: app
        options: "sslmode=disable"
        passwordPath: /etc/db/pass.txt
    storage:
      type: s3
      connection:
        region: us-east-2
      cache:
        max_size_mbs: 10
        target_gc_percent: 100
      container: "development-service-flyte"
    logger:
      show-source: true
      level: 1
    admin:
      endpoint: localhost:8089
      insecure: true
    plugins:
      # All k8s plugins default configuration
      k8s:
        inject-finalizer: true
        default-env-vars:
          - AWS_METADATA_SERVICE_TIMEOUT: 5
          - AWS_METADATA_SERVICE_NUM_ATTEMPTS: 20
      # Logging configuration
      # Escape Helm templating because admin will template these later
      logs:
        cloudwatch-enabled: true
        cloudwatch-log-group: '/eks/opta-development/cluster'
        cloudwatch-region: 'us-east-2'
    
    cluster_resources:
      refreshInterval: 5m
      templatePath: "/etc/flyte/cluster-resource-templates"
      # -- Starts the cluster resource manager in standalone mode with requisite auth credentials to call flyteadmin service endpoints
      standaloneDeployment: false
      customData:
      - production:
        - projectQuotaCpu:
            value: "5"
        - projectQuotaMemory:
            value: "4000Mi"
      - staging:
        - projectQuotaCpu:
            value: "2"
        - projectQuotaMemory:
            value: "3000Mi"
      - development:
        - projectQuotaCpu:
            value: "4"
        - projectQuotaMemory:
            value: "3000Mi"
      refresh: 5m
    task_resources:
      defaults:
        cpu: 500m
        memory: 500Mi
        storage: 500Mi
    catalog-cache:
      endpoint: localhost:8081
      insecure: true
      type: datacatalog
    namespace_mapping:
      template: "{{ project }}-{{ domain }}"
---
# Source: flyte-binary/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cluster-resource-templates
  labels: 
    helm.sh/chart: flyte-binary-0.1.0
    app.kubernetes.io/name: flyte-binary
    app.kubernetes.io/instance: flytesinglebin
    app.kubernetes.io/version: "1.16.0"
    app.kubernetes.io/managed-by: Helm
data:
  namespace.yaml: |
    apiVersion: v1
    kind: Namespace
    metadata:
      name: {{ namespace }}
    spec:
      finalizers:
      - kubernetes
  project_resource_quota.yaml: |
    apiVersion: v1
    kind: ResourceQuota
    metadata:
      name: project-quota
      namespace: {{ namespace }}
    spec:
      hard:
        limits.cpu: {{ projectQuotaCpu }}
        limits.memory: {{ projectQuotaMemory }}
---
# Source: flyte-binary/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: flyte-role
rules:
- apiGroups:
      - ""
  resources:
      - namespaces
      - resourcequotas
      - secrets
  verbs:
      - create
      - get
      - list
      - patch
      - update
- apiGroups:
      - ""
  resources:
      - pods
  verbs:
      - create
      - delete
      - get
      - list
      - patch
      - update
      - watch
- apiGroups:
      - ""
  resources:
      - events
  verbs:
      - create
      - delete
      - patch
      - update
- apiGroups:
      - flyte.lyft.com
  resources:
      - flyteworkflows
  verbs:
      - create
      - delete
      - deletecollection
      - get
      - list
      - patch
      - post
      - update
      - watch
- apiGroups:
      - apiextensions.k8s.io
  resources:
      - customresourcedefinitions
  verbs:
      - create
      - get
      - list
- apiGroups:
      - admissionregistration.k8s.io
  resources:
      - mutatingwebhookconfigurations
  verbs:
      - create
      - get
      - list
      - patch
      - update
---
# Source: flyte-binary/templates/rbac.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: flyte-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: flyte-role
subjects:
  - kind: ServiceAccount
    name: flyte
    # Have to add a namespace explicitly here so that the generated manifest has it
    # since kubectl apply --namespace won't update it.
    namespace: flyte
---
# Source: flyte-binary/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyte
spec:
  ports:
    - name: http
      port: 8088
    - name: grpc
      port: 8089
  selector:
    app: flyte
---
# Source: flyte-binary/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: flyte-pod-webhook
spec:
  ports:
    - name: webhook
      port: 443
      targetPort: 9443
  selector:
    app: flyte
---
# Source: flyte-binary/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: flyte
  name: flytebinary
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: flyte
  template:
    metadata:
      labels:
        app: flyte
    spec:
      hostNetwork: true
      containers:
      - name: flyte
        image: "ghcr.io/flyteorg/flyte-sandbox:flytebinary_1007"
        imagePullPolicy: IfNotPresent
        args:
        - start
        - --config
        - /etc/flyte/flyte.yaml
        resources:
          limits:
            cpu: 1
            memory: 1Gi
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 8088
          name: http
        - containerPort: 8089
          name: grpc
        - containerPort: 9443
          name: webhook
        volumeMounts:
        - mountPath: /etc/flyte/cluster-resource-templates
          name: cluster-resource-templates
        - mountPath: /etc/flyte/flyte.yaml
          subPath: flyte.yaml
          name: config
        - mountPath: /var/run/flyte
          name: state
        - mountPath: /etc/db
          name: db-pass
      serviceAccountName: flyte
      volumes:
      - name: cluster-resource-templates
        configMap:
          name: cluster-resource-templates
      - name: config
        configMap:
          name: flyte-backend-config
      - name: state
        emptyDir: {}
      - name: db-pass
        secret:
          secretName: flyte-db-pass
---
# Source: flyte-binary/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/app-root: /console
  name: flyte-core
spec:
  rules:
  - host: development.uniondemo.run
    http:
      paths:
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /console
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /console/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /api
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /api/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /healthcheck
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /v1/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /.well-known
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /.well-known/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /login
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /login/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /logout
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /logout/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /callback
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /callback/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /me
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /config
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /config/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /oauth2
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8088
        path: /oauth2/*
        pathType: ImplementationSpecific
---
# Source: flyte-binary/templates/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/backend-protocol: GRPC
  name: flyte-core-grpc
spec:
  rules:
  - host: development.uniondemo.run
    http:
      paths:
      - backend:
          service:
            name: flyte
            port:
              number: 8089
        path: /flyteidl.service.AdminService
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8089
        path: /flyteidl.service.AdminService/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8089
        path: /flyteidl.service.DataProxyService
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8089
        path: /flyteidl.service.DataProxyService/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8089
        path: /flyteidl.service.AuthMetadataService
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8089
        path: /flyteidl.service.AuthMetadataService/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8089
        path: /flyteidl.service.IdentityService
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8089
        path: /flyteidl.service.IdentityService/*
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8089
        path: /grpc.health.v1.Health
        pathType: ImplementationSpecific
      - backend:
          service:
            name: flyte
            port:
              number: 8089
        path: /grpc.health.v1.Health/*
        pathType: ImplementationSpecific
