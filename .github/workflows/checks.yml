name: Checks Flyte Components

on: push

env:
  GO_VERSION: "1.19"


jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      # Expose matched filters as job 'packages' output variable
      packages: ${{ steps.filter.outputs.changes }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            flyteadmin: flyteadmin/**
            flytepropeller: flytepropeller/**
  lint:
    needs: changes
    if: needs.changes.outputs.packages != '[]'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changes.outputs.packages) }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ matrix.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Lint
        run: make install && make lint

  unit-tests:
    needs: changes
    if: needs.changes.outputs.packages != '[]'
    strategy:
      matrix:
        package: ${{ fromJSON(needs.changes.outputs.packages) }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ matrix.package }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.GO_VERSION }}
#      - name: Unit Tests
#        env:
#          GITHUB_TOKEN: ${{ secrets.FLYTE_BOT_PAT }}
#        run: make install && make test_unit_codecov
#      - name: Push CodeCov
#        uses: codecov/codecov-action@v3.1.1
#        env:
#          GITHUB_TOKEN: ${{ secrets.FLYTE_BOT_PAT }}
#        with:
#          file: coverage.txt
#          flags: unittests
#          fail_ci_if_error: false