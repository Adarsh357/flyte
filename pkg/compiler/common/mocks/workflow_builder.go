// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import common "github.com/lyft/flytepropeller/pkg/compiler/common"
import core "github.com/lyft/flyteidl/gen/pb-go/flyteidl/core"
import errors "github.com/lyft/flytepropeller/pkg/compiler/errors"
import mock "github.com/stretchr/testify/mock"

// WorkflowBuilder is an autogenerated mock type for the WorkflowBuilder type
type WorkflowBuilder struct {
	mock.Mock
}

// AddExecutionEdge provides a mock function with given fields: nodeFrom, nodeTo
func (_m *WorkflowBuilder) AddExecutionEdge(nodeFrom string, nodeTo string) {
	_m.Called(nodeFrom, nodeTo)
}

// AddNode provides a mock function with given fields: n, errs
func (_m *WorkflowBuilder) AddNode(n common.NodeBuilder, errs errors.CompileErrors) (common.NodeBuilder, bool) {
	ret := _m.Called(n, errs)

	var r0 common.NodeBuilder
	if rf, ok := ret.Get(0).(func(common.NodeBuilder, errors.CompileErrors) common.NodeBuilder); ok {
		r0 = rf(n, errs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NodeBuilder)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(common.NodeBuilder, errors.CompileErrors) bool); ok {
		r1 = rf(n, errs)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetCoreWorkflow provides a mock function with given fields:
func (_m *WorkflowBuilder) GetCoreWorkflow() *core.CompiledWorkflow {
	ret := _m.Called()

	var r0 *core.CompiledWorkflow
	if rf, ok := ret.Get(0).(func() *core.CompiledWorkflow); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledWorkflow)
		}
	}

	return r0
}

// GetDownstreamNodes provides a mock function with given fields:
func (_m *WorkflowBuilder) GetDownstreamNodes() common.StringAdjacencyList {
	ret := _m.Called()

	var r0 common.StringAdjacencyList
	if rf, ok := ret.Get(0).(func() common.StringAdjacencyList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.StringAdjacencyList)
		}
	}

	return r0
}

// GetFailureNode provides a mock function with given fields:
func (_m *WorkflowBuilder) GetFailureNode() common.Node {
	ret := _m.Called()

	var r0 common.Node
	if rf, ok := ret.Get(0).(func() common.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Node)
		}
	}

	return r0
}

// GetLaunchPlan provides a mock function with given fields: id
func (_m *WorkflowBuilder) GetLaunchPlan(id core.Identifier) (common.InterfaceProvider, bool) {
	ret := _m.Called(id)

	var r0 common.InterfaceProvider
	if rf, ok := ret.Get(0).(func(core.Identifier) common.InterfaceProvider); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.InterfaceProvider)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetNode provides a mock function with given fields: id
func (_m *WorkflowBuilder) GetNode(id string) (common.NodeBuilder, bool) {
	ret := _m.Called(id)

	var r0 common.NodeBuilder
	if rf, ok := ret.Get(0).(func(string) common.NodeBuilder); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NodeBuilder)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetNodes provides a mock function with given fields:
func (_m *WorkflowBuilder) GetNodes() common.NodeIndex {
	ret := _m.Called()

	var r0 common.NodeIndex
	if rf, ok := ret.Get(0).(func() common.NodeIndex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NodeIndex)
		}
	}

	return r0
}

// GetSubWorkflow provides a mock function with given fields: id
func (_m *WorkflowBuilder) GetSubWorkflow(id core.Identifier) (*core.CompiledWorkflow, bool) {
	ret := _m.Called(id)

	var r0 *core.CompiledWorkflow
	if rf, ok := ret.Get(0).(func(core.Identifier) *core.CompiledWorkflow); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.CompiledWorkflow)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: id
func (_m *WorkflowBuilder) GetTask(id core.Identifier) (common.Task, bool) {
	ret := _m.Called(id)

	var r0 common.Task
	if rf, ok := ret.Get(0).(func(core.Identifier) common.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Task)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(core.Identifier) bool); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields:
func (_m *WorkflowBuilder) GetTasks() common.TaskIndex {
	ret := _m.Called()

	var r0 common.TaskIndex
	if rf, ok := ret.Get(0).(func() common.TaskIndex); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.TaskIndex)
		}
	}

	return r0
}

// GetUpstreamNodes provides a mock function with given fields:
func (_m *WorkflowBuilder) GetUpstreamNodes() common.StringAdjacencyList {
	ret := _m.Called()

	var r0 common.StringAdjacencyList
	if rf, ok := ret.Get(0).(func() common.StringAdjacencyList); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.StringAdjacencyList)
		}
	}

	return r0
}

// NewNodeBuilder provides a mock function with given fields: n
func (_m *WorkflowBuilder) NewNodeBuilder(n *core.Node) common.NodeBuilder {
	ret := _m.Called(n)

	var r0 common.NodeBuilder
	if rf, ok := ret.Get(0).(func(*core.Node) common.NodeBuilder); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.NodeBuilder)
		}
	}

	return r0
}

// ValidateWorkflow provides a mock function with given fields: fg, errs
func (_m *WorkflowBuilder) ValidateWorkflow(fg *core.CompiledWorkflow, errs errors.CompileErrors) (common.Workflow, bool) {
	ret := _m.Called(fg, errs)

	var r0 common.Workflow
	if rf, ok := ret.Get(0).(func(*core.CompiledWorkflow, errors.CompileErrors) common.Workflow); ok {
		r0 = rf(fg, errs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(common.Workflow)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(*core.CompiledWorkflow, errors.CompileErrors) bool); ok {
		r1 = rf(fg, errs)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}
